{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/chris/Documents/react/knockoutwhistreact/src/components/TestConnect.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useReducer } from 'react';\nimport { animateScroll } from \"react-scroll\";\nimport sock from '../services/socket';\nimport SendName from './SendName';\nimport Rooms from './Rooms';\nimport Room from './Room';\nimport Users from './Users';\n\nconst TestConnect = () => {\n  _s();\n\n  // const wsproto = 'wss';\n  // const wsuri = wsproto + \"://\" + window.location.hostname + \":8080/ws\";\n  // let sock = new WebSocket(wsuri);\n  const initialState = {\n    response: '',\n    showNameDialog: false,\n    users: [],\n    myId: null,\n    myName: null,\n    rooms: null,\n    inRoom: false,\n    roomName: '',\n    roomMessages: [],\n    otherMembers: [],\n    hand: [],\n    startPlayer: false,\n    trump: null\n  };\n\n  const scrollDown = () => {\n    console.log('Using room effect');\n    animateScroll.scrollToBottom({\n      containerId: \"messages\"\n    });\n  };\n\n  function reducer(state, action) {\n    let msg;\n    let otherMembers;\n    let inRoom;\n    let roomMessages;\n    let roomName;\n\n    switch (action.type) {\n      case 'setResponse':\n        return { ...state,\n          response: action.payload\n        };\n\n      case 'showNameDialog':\n        return { ...state,\n          showNameDialog: true\n        };\n\n      case 'clientList':\n        return { ...state,\n          users: action.payload\n        };\n\n      case 'setName':\n        console.log(action.payload);\n        return { ...state,\n          myName: action.payload\n        };\n\n      case 'register':\n        return { ...state,\n          myId: action.payload\n        };\n\n      case 'roomList':\n        return { ...state,\n          rooms: action.payload\n        };\n\n      case 'enterRoom':\n        console.log('Tying to enter the room', action.payload);\n\n        if (action.payload.client.name === state.myName) {\n          msg = `Welcome, you have entered ${action.payload.name}.`;\n        } else {\n          msg = `${action.payload.client.name} has entered the room.`;\n        }\n\n        otherMembers = action.payload.members.filter(item => item.id !== state.myId);\n        return { ...state,\n          inRoom: true,\n          roomName: action.payload.name,\n          roomMessages: [...state.roomMessages, {\n            class: 'entrance',\n            msg\n          }],\n          otherMembers\n        };\n\n      case 'exitRoom':\n        msg = `${action.payload.client.name} has left the room.`; //Declare variables for state as dependant on user being leaver\n\n        roomMessages = [...state.roomMessages, {\n          class: 'entrance',\n          msg\n        }];\n        console.log('I AM LEAVING THE ROOM', action.payload.client.id, state.myId);\n\n        if (action.payload.client.id === state.myId) {\n          inRoom = false;\n          roomName = '';\n          otherMembers = [];\n          roomMessages = [];\n        } else {\n          inRoom = true;\n          roomName = action.payload.name;\n          otherMembers = action.payload.members.filter(item => item.id !== state.myId).filter(item => item.name !== action.payload.client.name);\n          console.log('Other members here', otherMembers);\n        }\n\n        return { ...state,\n          inRoom,\n          roomName,\n          roomMessages,\n          otherMembers\n        };\n\n      case 'roomMessage':\n        scrollDown();\n        msg = `${action.payload.client.name}: ${action.payload.message} `;\n        return { ...state,\n          roomMessages: [...state.roomMessages, {\n            class: 'message',\n            msg\n          }]\n        };\n\n      case 'roomPm':\n        console.log('Pay me now', action.payload);\n        scrollDown();\n        msg = `${action.payload.sender}: ${action.payload.message} `;\n        return { ...state,\n          roomMessages: [...state.roomMessages, {\n            class: 'pm',\n            msg\n          }]\n        };\n\n      case 'destroyRoom':\n        //Forces an exit of room\n        return { ...state,\n          inRoom: false,\n          roomName: '',\n          roomMessages: [],\n          otherMembers: [],\n          hand: []\n        };\n\n      case 'hand':\n        //Set the hand\n        console.log(action.payload);\n        return { ...state,\n          hand: action.payload.hand,\n          startPlayer: action.payload.startplayer,\n          trump: action.payload.trump\n        };\n\n      default:\n        return state;\n    }\n  } //const [response,setResponse] = useState('');\n\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    console.log('Using Effect');\n\n    if (sock) {\n      sock.onopen = function () {\n        console.log(\"Connected\");\n      };\n\n      sock.onclose = e => {\n        console.log(\"Connection closed (wasClean = \" + e.wasClean + \", code = \" + e.code + \", reason = '\" + e.reason + \"')\"); //this = null;\n\n        console.log(e, sock);\n      };\n\n      sock.onmessage = function (e) {\n        let data = JSON.parse(e.data); //let data = e;\n\n        console.log(data);\n\n        switch (data.type) {\n          case 'register':\n            dispatch({\n              type: 'register',\n              payload: data.yourid\n            });\n            break;\n\n          case 'client_list':\n            dispatch({\n              type: 'clientList',\n              payload: data.clients\n            });\n            break;\n\n          case 'set_name':\n            dispatch({\n              type: 'setName',\n              payload: data.message\n            });\n            break;\n\n          case 'room_list':\n            dispatch({\n              type: 'roomList',\n              payload: JSON.parse(data.rooms)\n            });\n            break;\n\n          case 'room_entrance':\n            dispatch({\n              type: 'enterRoom',\n              payload: data\n            });\n            break;\n\n          case 'room_exit':\n            dispatch({\n              type: 'exitRoom',\n              payload: data\n            });\n            break;\n\n          case 'hand':\n            dispatch({\n              type: 'hand',\n              payload: data\n            });\n            break;\n\n          case 'destroy_room':\n            dispatch({\n              type: 'destroyRoom',\n              payload: data\n            });\n            break;\n\n          case 'room_message':\n            dispatch({\n              type: 'roomMessage',\n              payload: data\n            });\n            break;\n\n          case 'in_room_pm':\n            dispatch({\n              type: 'roomPm',\n              payload: data\n            });\n            break;\n\n          default:\n            dispatch({\n              type: 'setResponse',\n              payload: data.message\n            });\n        }\n      };\n    }\n  }, []);\n\n  const sendMessage = async () => {\n    console.log('Message sent');\n\n    if (sock) {\n      //await sock.send('@:Hello World!');\n      let payload = {\n        type: 'broadcast',\n        message: 'Hello World'\n      };\n      await sock.send(JSON.stringify(payload));\n      console.log(\"Sent \");\n    } else {\n      console.log(\"Not connected.\");\n    }\n  };\n\n  console.log('Something is rotten in the state of react', state);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: state.myName ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Welcome \", state.myName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this), state.inRoom ? /*#__PURE__*/_jsxDEV(Room, {\n        userId: state.myId,\n        name: state.myName,\n        roomName: state.roomName,\n        roomMessages: state.roomMessages,\n        otherMembers: state.otherMembers,\n        hand: state.hand,\n        startPlayer: state.startPlayer,\n        trump: state.trump\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(Rooms, {\n        userId: state.myId,\n        rooms: state.rooms\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Welcome\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SendName, {\n        userId: state.myId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n}; //REMOVED FOR TIME BEING\n// <button onClick={sendMessage}>Send Message</button>\n// <p>{state.response}</p>\n\n\n_s(TestConnect, \"gZZ3TaNWFnk5pxLxmdKGLDXNo7Y=\");\n\n_c = TestConnect;\nexport default TestConnect;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestConnect\");","map":{"version":3,"sources":["/home/chris/Documents/react/knockoutwhistreact/src/components/TestConnect.js"],"names":["useEffect","useReducer","animateScroll","sock","SendName","Rooms","Room","Users","TestConnect","initialState","response","showNameDialog","users","myId","myName","rooms","inRoom","roomName","roomMessages","otherMembers","hand","startPlayer","trump","scrollDown","console","log","scrollToBottom","containerId","reducer","state","action","msg","type","payload","client","name","members","filter","item","id","class","message","sender","startplayer","dispatch","onopen","onclose","e","wasClean","code","reason","onmessage","data","JSON","parse","yourid","clients","sendMessage","send","stringify"],"mappings":"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","sourcesContent":["import {useEffect, useReducer} from 'react';\nimport { animateScroll } from \"react-scroll\";\nimport sock from '../services/socket';\nimport SendName from './SendName';\nimport Rooms from './Rooms';\nimport Room from './Room';\nimport Users from './Users';\n\nconst TestConnect = () => {\n  // const wsproto = 'wss';\n  // const wsuri = wsproto + \"://\" + window.location.hostname + \":8080/ws\";\n  // let sock = new WebSocket(wsuri);\n\n  const initialState = {\n                          response:'',\n                          showNameDialog:false,\n                          users: [],\n                          myId:null,\n                          myName:null,\n                          rooms:null,\n                          inRoom: false,\n                          roomName: '',\n                          roomMessages: [],\n                          otherMembers: [],\n                          hand:[],\n                          startPlayer:false,\n                          trump: null\n  };\n\n\n  const scrollDown = () => {\n    console.log('Using room effect');\n    animateScroll.scrollToBottom({\n      containerId: \"messages\"\n    });\n  };\n\n  function reducer(state, action) {\n    let msg;\n    let otherMembers;\n    let inRoom;\n    let roomMessages;\n    let roomName;\n\n    switch (action.type) {\n      case 'setResponse':\n        return {...state, response : action.payload};\n      case 'showNameDialog':\n        return {...state, showNameDialog : true};\n      case 'clientList':\n        return {...state, users : action.payload};\n      case 'setName':\n        console.log(action.payload);\n        return {...state, myName : action.payload};\n      case 'register':\n        return {...state, myId : action.payload};\n      case 'roomList':\n        return {...state, rooms : action.payload};\n      case 'enterRoom':\n        console.log('Tying to enter the room', action.payload);\n        if (action.payload.client.name === state.myName) {\n          msg = `Welcome, you have entered ${action.payload.name}.`;\n        } else {\n          msg = `${action.payload.client.name} has entered the room.`;\n        }\n        otherMembers = action.payload.members.filter((item) => (item.id !== state.myId));\n        return {  ...state,\n                  inRoom : true,\n                  roomName: action.payload.name,\n                  roomMessages : [...state.roomMessages,{ class:'entrance', msg }],\n                  otherMembers\n        };\n      case 'exitRoom':\n        msg = `${action.payload.client.name} has left the room.`;\n        //Declare variables for state as dependant on user being leaver\n        roomMessages= [...state.roomMessages,{ class:'entrance', msg }];\n        console.log('I AM LEAVING THE ROOM',action.payload.client.id,state.myId);\n        if(action.payload.client.id === state.myId) {\n          inRoom = false;\n          roomName = '';\n          otherMembers = [];\n          roomMessages = [];\n        } else {\n          inRoom = true;\n          roomName = action.payload.name;\n          otherMembers = action.payload.members.filter((item) => (item.id !== state.myId))\n            .filter((item) => (item.name !== action.payload.client.name));\n          console.log('Other members here', otherMembers);\n        }\n        return {  ...state,\n                  inRoom,\n                  roomName,\n                  roomMessages,\n                  otherMembers\n        };\n      case 'roomMessage':\n        scrollDown();\n        msg = `${action.payload.client.name}: ${action.payload.message} `;\n        return {  ...state,\n                  roomMessages : [...state.roomMessages,{ class:'message', msg }],\n        };\n      case 'roomPm':\n        console.log('Pay me now',action.payload);\n        scrollDown();\n        msg = `${action.payload.sender}: ${action.payload.message} `;\n        return {  ...state,\n                  roomMessages : [...state.roomMessages,{ class:'pm', msg }],\n        };\n      case 'destroyRoom':\n        //Forces an exit of room\n        return {  ...state,\n                  inRoom : false,\n                  roomName :'',\n                  roomMessages:[],\n                  otherMembers:[],\n                  hand:[]\n        };\n      case 'hand':\n        //Set the hand\n        console.log(action.payload);\n        return {  ...state,\n                  hand : action.payload.hand,\n                  startPlayer: action.payload.startplayer,\n                  trump: action.payload.trump\n        };\n      default:\n        return state;\n    }\n  }\n\n  //const [response,setResponse] = useState('');\n  const [state,dispatch] = useReducer(reducer,initialState);\n\n  useEffect( () => {\n    console.log('Using Effect');\n    if (sock) {\n       sock.onopen = function() {\n          console.log(\"Connected\");\n       }\n\n       sock.onclose = (e) =>  {\n          console.log(\"Connection closed (wasClean = \" + e.wasClean + \", code = \" + e.code + \", reason = '\" + e.reason + \"')\");\n          //this = null;\n          console.log(e,sock);\n       }\n\n       sock.onmessage = function(e) {\n          let data = JSON.parse(e.data)\n          //let data = e;\n          console.log(data);\n          switch(data.type) {\n              case 'register':\n                dispatch({type:'register', payload:data.yourid});\n                break;\n              case 'client_list':\n                dispatch({type:'clientList', payload:data.clients});\n                break;\n              case 'set_name':\n                dispatch({type:'setName', payload:data.message});\n                break;\n              case 'room_list':\n                dispatch({type:'roomList', payload:JSON.parse(data.rooms)});\n                break;\n              case 'room_entrance':\n                dispatch({type:'enterRoom', payload:data});\n                break;\n              case 'room_exit':\n                dispatch({type:'exitRoom', payload:data});\n                break;\n              case 'hand':\n                dispatch({type:'hand', payload:data});\n                break;\n              case 'destroy_room':\n                dispatch({type:'destroyRoom', payload:data});\n                break;\n              case 'room_message':\n                dispatch({type:'roomMessage', payload:data});\n                break;\n              case 'in_room_pm':\n                dispatch({type:'roomPm', payload:data});\n                break;\n              default:\n                dispatch({type:'setResponse', payload:data.message});\n          }\n       }\n     }\n  }, [] );\n\n\n\n  const sendMessage = async () => {\n    console.log('Message sent');\n    if (sock) {\n       //await sock.send('@:Hello World!');\n       let payload = {\n         type : 'broadcast',\n         message : 'Hello World'\n       }\n       await sock.send(JSON.stringify(payload));\n       console.log(\"Sent \");\n    } else {\n       console.log(\"Not connected.\");\n    }\n  }\n\n  console.log('Something is rotten in the state of react', state);\n\n  return (\n    <div>\n      { state.myName ?\n        <>\n          <p>Welcome {state.myName}</p>\n          {\n            state.inRoom ?\n              <Room userId={state.myId}\n                    name={state.myName}\n                    roomName={state.roomName}\n                    roomMessages={state.roomMessages}\n                    otherMembers={state.otherMembers}\n                    hand={state.hand}\n                    startPlayer={state.startPlayer}\n                    trump ={state.trump}\n                    /> :\n              <Rooms userId={state.myId} rooms={state.rooms}/>\n          }\n        </> :\n        <>\n          <p>Welcome</p>\n          <SendName userId={state.myId} />\n        </>\n      }\n\n    </div>\n  )\n}\n\n//REMOVED FOR TIME BEING\n// <button onClick={sendMessage}>Send Message</button>\n// <p>{state.response}</p>\n\nexport default TestConnect;\n"]},"metadata":{},"sourceType":"module"}