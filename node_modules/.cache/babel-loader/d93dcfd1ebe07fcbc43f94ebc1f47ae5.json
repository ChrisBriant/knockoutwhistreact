{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/chris/Documents/react/knockoutwhistreact/src/components/Room.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react'; //import { animateScroll } from \"react-scroll\";\n\nimport Hand from './Hand';\nimport sock from '../services/socket';\n\nconst Room = props => {\n  _s();\n\n  console.log(props);\n  const [message, setMessage] = useState('');\n  const [pm, setPm] = useState(null);\n\n  const exitRoom = async () => {\n    let payload = {\n      'type': 'exit_room',\n      'client_id': props.userId,\n      'name': props.roomName\n    };\n    await sock.send(JSON.stringify(payload));\n  };\n\n  const startGame = async () => {\n    let payload = {\n      'type': 'start_game',\n      'name': props.roomName\n    };\n    await sock.send(JSON.stringify(payload));\n  }; // const handleEditMessage = async (e) => {\n  //   console.log('text ', e.target.value);\n  //   setMessage(e.target.value);\n  // }\n  //\n  // const sendRoomMessage = async () => {\n  //   let payload = {\n  //     'type' : 'message_room',\n  //     'client_id' : props.userId,\n  //     'name' : props.roomName,\n  //     'message' : message\n  //   }\n  //   await sock.send(JSON.stringify(payload));\n  // }\n  //\n  //\n  // const sendMessage = async (e) => {\n  //   //Check for the '@' symbol with a username\n  //   let sendingPm = message.search(/@([^].)\\w+/i);\n  //   if (sendingPm == 0) {\n  //     console.log('Sending private message')\n  //     //Get the user and check exists\n  //     let person = message.split(':')[0].split('@')[1]\n  //     let personMember = props.otherMembers.filter((m) => (m.name === person));\n  //     if(personMember.length > 0) {\n  //       console.log('Person Exists',personMember);\n  //       let payload = {\n  //         'type' : 'room_pm',\n  //         'client_id' : personMember[0].id,\n  //         'message' : message,\n  //         'sender' : props.name\n  //       }\n  //       console.log('SENDING', payload);\n  //       await sock.send(JSON.stringify(payload));\n  //       //Clear message\n  //       setMessage('');\n  //     } else {\n  //       console.log('Person does not exist');\n  //       sendRoomMessage();\n  //       setMessage('');\n  //     }\n  //   } else {\n  //     console.log('Sending room message');\n  //     sendRoomMessage();\n  //     setMessage('');\n  //   }\n  //\n  //\n  // }\n  //\n  // const pmMember = async (member) => {\n  //   console.log('send a private message',member);\n  //   setMessage(`@${member.name}: `);\n  //   setPm(member);\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You are in \", props.roomName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: props.otherMembers.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Players:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this), props.otherMembers.map((member, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [member.id === props.startPlayer ? '>' : props.startPlayer, \" \", member.name]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this), props.hand.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: startGame,\n            children: \"Start Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(Hand, {\n          hand: props.hand\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Waiting for others to join\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"exit\",\n        onClick: exitRoom,\n        children: \"Exit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Room, \"EYD6t6dJqPqw4rd1PROl8qd8lLc=\");\n\n_c = Room;\nexport default Room; //REMOVE for now\n//<div className=\"editable-div\" contentEditable=\"true\" onChange={handleEditMessage}></div>\n\nvar _c;\n\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"sources":["/home/chris/Documents/react/knockoutwhistreact/src/components/Room.js"],"names":["useState","Hand","sock","Room","props","console","log","message","setMessage","pm","setPm","exitRoom","payload","userId","roomName","send","JSON","stringify","startGame","otherMembers","length","map","member","i","id","startPlayer","name","hand"],"mappings":";;;;;;AAAA,SAAQA,QAAR,QAAuB,OAAvB,C,CACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;;AAIA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEA,QAAM,CAACG,OAAD,EAASC,UAAT,IAAuBR,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM,CAACS,EAAD,EAAIC,KAAJ,IAAaV,QAAQ,CAAC,IAAD,CAA3B;;AAEA,QAAMW,QAAQ,GAAG,YAAY;AAC3B,QAAIC,OAAO,GAAG;AACZ,cAAS,WADG;AAEZ,mBAAcR,KAAK,CAACS,MAFR;AAGZ,cAAST,KAAK,CAACU;AAHH,KAAd;AAKA,UAAMZ,IAAI,CAACa,IAAL,CAAUC,IAAI,CAACC,SAAL,CAAeL,OAAf,CAAV,CAAN;AACD,GAPD;;AASA,QAAMM,SAAS,GAAG,YAAY;AAC5B,QAAIN,OAAO,GAAG;AACZ,cAAS,YADG;AAEZ,cAASR,KAAK,CAACU;AAFH,KAAd;AAIA,UAAMZ,IAAI,CAACa,IAAL,CAAUC,IAAI,CAACC,SAAL,CAAeL,OAAf,CAAV,CAAN;AACD,GAND,CAfsB,CAuBtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACE;AAAA,4BACE;AAAA,gCAAeR,KAAK,CAACU,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBACIV,KAAK,CAACe,YAAN,CAAmBC,MAAnB,GAA4B,CAA5B,gBAEE;AAAA,gCACE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAGIhB,KAAK,CAACe,YAAN,CAAmBE,GAAnB,CAAuB,CAACC,MAAD,EAAQC,CAAR,kBACrB;AAAA,uBAAYD,MAAM,CAACE,EAAP,KAAcpB,KAAK,CAACqB,WAApB,GAAkC,GAAlC,GAAwCrB,KAAK,CAACqB,WAA1D,OAAwEH,MAAM,CAACI,IAA/E;AAAA,aAAQH,CAAR;AAAA;AAAA;AAAA;AAAA,kBADF,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAUInB,KAAK,CAACuB,IAAN,CAAWP,MAAX,KAAsB,CAAtB,gBAEE;AAAA,iCACE;AAAQ,YAAA,OAAO,EAAEF,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF,gBAME,QAAC,IAAD;AACE,UAAA,IAAI,EAAId,KAAK,CAACuB;AADhB;AAAA;AAAA;AAAA;AAAA,gBAhBN;AAAA,sBAFF,gBAwBE;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAzBN;AAAA;AAAA;AAAA;AAAA,YAFF,eAiCE;AAAA,6BACE;AAAQ,QAAA,EAAE,EAAC,MAAX;AAAkB,QAAA,OAAO,EAAEhB,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAjCF;AAAA,kBADF;AAuCD,CAtHD;;GAAMR,I;;KAAAA,I;AAwHN,eAAeA,IAAf,C,CAEA;AACA","sourcesContent":["import {useState} from 'react';\n//import { animateScroll } from \"react-scroll\";\nimport Hand from './Hand';\nimport sock from '../services/socket';\n\n\n\nconst Room = (props) => {\n  console.log(props);\n\n  const [message,setMessage] = useState('');\n  const [pm,setPm] = useState(null);\n\n  const exitRoom = async () => {\n    let payload = {\n      'type' : 'exit_room',\n      'client_id' : props.userId,\n      'name' : props.roomName\n    }\n    await sock.send(JSON.stringify(payload));\n  }\n\n  const startGame = async () => {\n    let payload = {\n      'type' : 'start_game',\n      'name' : props.roomName\n    }\n    await sock.send(JSON.stringify(payload));\n  }\n\n  // const handleEditMessage = async (e) => {\n  //   console.log('text ', e.target.value);\n  //   setMessage(e.target.value);\n  // }\n  //\n  // const sendRoomMessage = async () => {\n  //   let payload = {\n  //     'type' : 'message_room',\n  //     'client_id' : props.userId,\n  //     'name' : props.roomName,\n  //     'message' : message\n  //   }\n  //   await sock.send(JSON.stringify(payload));\n  // }\n  //\n  //\n  // const sendMessage = async (e) => {\n  //   //Check for the '@' symbol with a username\n  //   let sendingPm = message.search(/@([^].)\\w+/i);\n  //   if (sendingPm == 0) {\n  //     console.log('Sending private message')\n  //     //Get the user and check exists\n  //     let person = message.split(':')[0].split('@')[1]\n  //     let personMember = props.otherMembers.filter((m) => (m.name === person));\n  //     if(personMember.length > 0) {\n  //       console.log('Person Exists',personMember);\n  //       let payload = {\n  //         'type' : 'room_pm',\n  //         'client_id' : personMember[0].id,\n  //         'message' : message,\n  //         'sender' : props.name\n  //       }\n  //       console.log('SENDING', payload);\n  //       await sock.send(JSON.stringify(payload));\n  //       //Clear message\n  //       setMessage('');\n  //     } else {\n  //       console.log('Person does not exist');\n  //       sendRoomMessage();\n  //       setMessage('');\n  //     }\n  //   } else {\n  //     console.log('Sending room message');\n  //     sendRoomMessage();\n  //     setMessage('');\n  //   }\n  //\n  //\n  // }\n  //\n  // const pmMember = async (member) => {\n  //   console.log('send a private message',member);\n  //   setMessage(`@${member.name}: `);\n  //   setPm(member);\n  // }\n\n  return (\n    <>\n      <p>You are in {props.roomName}</p>\n      <div>\n        { props.otherMembers.length > 0\n          ?\n            <>\n              <div>\n                <p>Players:</p>\n                {\n                  props.otherMembers.map((member,i) => (\n                    <p key={i}>{member.id === props.startPlayer ? '>' : props.startPlayer} {member.name}</p>\n                  ))\n                }\n              </div>\n              {\n                props.hand.length === 0\n                ?\n                  <div>\n                    <button onClick={startGame}>Start Game</button>\n                  </div>\n                :\n                  <Hand\n                    hand = {props.hand}\n                  />\n              }\n            </>\n          :\n            <div>\n              <p>Waiting for others to join</p>\n            </div>\n        }\n      </div>\n\n      <div>\n        <button id=\"exit\" onClick={exitRoom}>Exit</button>\n      </div>\n    </>\n  );\n}\n\nexport default Room;\n\n//REMOVE for now\n//<div className=\"editable-div\" contentEditable=\"true\" onChange={handleEditMessage}></div>\n"]},"metadata":{},"sourceType":"module"}