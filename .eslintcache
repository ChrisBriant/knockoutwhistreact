[{"/home/chris/Documents/react/knockoutwhistreact/src/index.js":"1","/home/chris/Documents/react/knockoutwhistreact/src/App.js":"2","/home/chris/Documents/react/knockoutwhistreact/src/reportWebVitals.js":"3","/home/chris/Documents/react/knockoutwhistreact/src/components/TestConnect.js":"4","/home/chris/Documents/react/knockoutwhistreact/src/components/SendName.js":"5","/home/chris/Documents/react/knockoutwhistreact/src/components/Rooms.js":"6","/home/chris/Documents/react/knockoutwhistreact/src/components/Room.js":"7","/home/chris/Documents/react/knockoutwhistreact/src/components/Users.js":"8","/home/chris/Documents/react/knockoutwhistreact/src/services/socket.js":"9","/home/chris/Documents/react/knockoutwhistreact/src/components/Hand.js":"10","/home/chris/Documents/react/knockoutwhistreact/src/services/image-loader.js":"11","/home/chris/Documents/react/knockoutwhistreact/src/components/CardImage.js":"12","/home/chris/Documents/react/knockoutwhistreact/src/components/Table.js":"13","/home/chris/Documents/react/knockoutwhistreact/src/components/Tricks.js":"14","/home/chris/Documents/react/knockoutwhistreact/src/components/PlayerBox.js":"15","/home/chris/Documents/react/knockoutwhistreact/src/components/RoundResults.js":"16","/home/chris/Documents/react/knockoutwhistreact/src/components/GameOver.js":"17","/home/chris/Documents/react/knockoutwhistreact/src/services/suithelper.js":"18"},{"size":500,"mtime":1611039083000,"results":"19","hashOfConfig":"20"},{"size":338,"mtime":1611292363000,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1611039083000,"results":"22","hashOfConfig":"20"},{"size":12883,"mtime":1612680899481,"results":"23","hashOfConfig":"20"},{"size":856,"mtime":1611641018000,"results":"24","hashOfConfig":"20"},{"size":1419,"mtime":1611640981000,"results":"25","hashOfConfig":"20"},{"size":6307,"mtime":1612680876533,"results":"26","hashOfConfig":"20"},{"size":507,"mtime":1611404422000,"results":"27","hashOfConfig":"20"},{"size":151,"mtime":1611814462683,"results":"28","hashOfConfig":"20"},{"size":3060,"mtime":1612698669633,"results":"29","hashOfConfig":"20"},{"size":635,"mtime":1611989802621,"results":"30","hashOfConfig":"20"},{"size":5160,"mtime":1612696934333,"results":"31","hashOfConfig":"20"},{"size":4513,"mtime":1612699160399,"results":"32","hashOfConfig":"20"},{"size":626,"mtime":1612241714774,"results":"33","hashOfConfig":"20"},{"size":280,"mtime":1612159983946,"results":"34","hashOfConfig":"20"},{"size":337,"mtime":1612332509082,"results":"35","hashOfConfig":"20"},{"size":682,"mtime":1612506491205,"results":"36","hashOfConfig":"20"},{"size":309,"mtime":1612678296944,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"n6cf1y",{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/home/chris/Documents/react/knockoutwhistreact/src/index.js",[],["80","81"],"/home/chris/Documents/react/knockoutwhistreact/src/App.js",["82"],"import logo from './logo.svg';\nimport './App.css';\nimport TestConnect from './components/TestConnect.js';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TestConnect />\n      </header>\n      <main>\n\n      </main>\n      <footer>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","/home/chris/Documents/react/knockoutwhistreact/src/reportWebVitals.js",[],"/home/chris/Documents/react/knockoutwhistreact/src/components/TestConnect.js",["83","84"],"import {useEffect, useReducer} from 'react';\nimport { animateScroll } from \"react-scroll\";\nimport sock from '../services/socket';\nimport SendName from './SendName';\nimport Rooms from './Rooms';\nimport Room from './Room';\nimport Users from './Users';\n\nconst TestConnect = () => {\n  // const wsproto = 'wss';\n  // const wsuri = wsproto + \"://\" + window.location.hostname + \":8080/ws\";\n  // let sock = new WebSocket(wsuri);\n\n  const initialState = {\n                          response:'',\n                          showNameDialog:false,\n                          users: [],\n                          myId:null,\n                          myName:null,\n                          rooms:null,\n                          inRoom: false,\n                          roomName: '',\n                          roomMessages: [],\n                          otherMembers: [],\n                          hand:[],\n                          startPlayer:false,\n                          trump: null,\n                          trick: [],\n                          completedTricks: [],\n                          roundNumber: 0,\n                          gameInProgress: false,\n                          roundResults: [],\n                          tieBreaker: false,\n                          tieBreakerDeck: [],\n                          tieBreakId : '',\n                          tieBreakWinner: null,\n                          ties : [],\n                          tieStartPlayer: '',\n                          startRound:false,\n                          winner: null\n  };\n\n\n  const scrollDown = () => {\n    console.log('Using room effect');\n    animateScroll.scrollToBottom({\n      containerId: \"messages\"\n    });\n  };\n\n  function reducer(state, action) {\n    let msg;\n    let otherMembers;\n    let inRoom;\n    let roomMessages;\n    let roomName;\n    let tieBreaker;\n    let tieBreakerDeck;\n    let tieStartPlayer;\n    let ties;\n    let newRoundResults;\n\n    switch (action.type) {\n      case 'setResponse':\n        return {...state, response : action.payload};\n      case 'showNameDialog':\n        return {...state, showNameDialog : true};\n      case 'clientList':\n        return {...state, users : action.payload};\n      case 'setName':\n        console.log(action.payload);\n        return {...state, myName : action.payload};\n      case 'register':\n        return {...state, myId : action.payload};\n      case 'roomList':\n        return {...state, rooms : action.payload};\n      case 'enterRoom':\n        console.log('Tying to enter the room', action.payload);\n        if (action.payload.client.name === state.myName) {\n          msg = `Welcome, you have entered ${action.payload.name}.`;\n        } else {\n          msg = `${action.payload.client.name} has entered the room.`;\n        }\n        otherMembers = action.payload.members.filter((item) => (item.id !== state.myId));\n        return {  ...state,\n                  inRoom : true,\n                  roomName: action.payload.name,\n                  roomMessages : [...state.roomMessages,{ class:'entrance', msg }],\n                  otherMembers\n        };\n      case 'exitRoom':\n        msg = `${action.payload.client.name} has left the room.`;\n        //Declare variables for state as dependant on user being leaver\n        roomMessages= [...state.roomMessages,{ class:'entrance', msg }];\n        console.log('I AM LEAVING THE ROOM',action.payload.client.id,state.myId);\n        if(action.payload.client.id === state.myId) {\n          inRoom = false;\n          roomName = '';\n          otherMembers = [];\n          roomMessages = [];\n        } else {\n          inRoom = true;\n          roomName = action.payload.name;\n          otherMembers = action.payload.members.filter((item) => (item.id !== state.myId))\n            .filter((item) => (item.name !== action.payload.client.name));\n          console.log('Other members here', otherMembers);\n        }\n        return {  ...state,\n                  inRoom,\n                  roomName,\n                  roomMessages,\n                  otherMembers\n        };\n      case 'roomMessage':\n        scrollDown();\n        msg = `${action.payload.client.name}: ${action.payload.message} `;\n        return {  ...state,\n                  roomMessages : [...state.roomMessages,{ class:'message', msg }],\n        };\n      case 'roomPm':\n        console.log('Pay me now',action.payload);\n        scrollDown();\n        msg = `${action.payload.sender}: ${action.payload.message} `;\n        return {  ...state,\n                  roomMessages : [...state.roomMessages,{ class:'pm', msg }],\n        };\n      case 'destroyRoom':\n        //Forces an exit of room\n        return {  ...state,\n                  inRoom : false,\n                  roomName :'',\n                  roomMessages:[],\n                  otherMembers:[],\n                  hand:[]\n        };\n      case 'hand':\n        //Set the hand\n        console.log('HAND',action.payload,state.completedTricks);\n        return {  ...state,\n                  hand : action.payload.hand,\n                  startPlayer: action.payload.startplayer,\n                  trump: action.payload.trump,\n                  trick: action.payload.trick,\n                  completedTricks: action.payload.completed_tricks,\n                  roundNumber: action.payload.round_number,\n                  gameInProgress: true,\n                  startRound: false\n        };\n      case 'roundResult':\n        //Set the hand\n        //// TODO: Implement Tie Breaker logic\n        if(action.payload.round_result.ties.length > 1) {\n          tieBreaker = true;\n        } else {\n          tieBreaker = false;\n        }\n        return {  ...state,\n                  hand : action.payload.hand,\n                  startPlayer: action.payload.startplayer,\n                  trump: action.payload.trump,\n                  trick: action.payload.trick,\n                  completedTricks: action.payload.completed_tricks,\n                  roundNumber: action.payload.round_number,\n                  gameInProgress: true,\n                  startRound:true,\n                  roundResults: [...state.roundResults,action.payload.round_result],\n                  tieBreaker: tieBreaker\n        };\n        case 'newTrump':\n          return {  ...state,\n                    trump: action.payload.trump,\n                    startRound: false\n          };\n        case 'endGame':\n          //Set the hand\n          //// TODO: Implement Tie Breaker logic\n          if(action.payload.winner.ties.length > 1) {\n            tieBreaker = true;\n            tieBreakerDeck = action.payload.winner.tie_breaker_deck;\n            tieStartPlayer = action.payload.winner.tie_starter;\n            ties = action.payload.winner.ties.map((t) => (t.player))\n          } else {\n            tieBreaker = false;\n            tieBreakerDeck = [];\n          }\n          return {  ...state,\n                    hand : action.payload.hand,\n                    winner: action.payload.winner,\n                    tieBreaker: tieBreaker,\n                    tieBreakerDeck: tieBreakerDeck,\n                    tieStartPlayer: tieStartPlayer,\n                    ties : ties\n          };\n      case 'tieBreak':\n        return { ...state,\n                tieBreaker: true,\n                tieStartPlayer: action.payload.start_player,\n                ties: action.payload.ties,\n                tieBreakWinner: action.payload.winner,\n                tieBreakId : action.payload.tie_break_id\n        };\n      case 'endTieBreak':\n        //Result might have changed so need to capture that and also reset\n        // all state variables related to tie breaking\n        console.log('Round Results Here', state.roundResults);\n        newRoundResults = state.roundResults.filter((roundResult) => (roundResult.round_number !== action.payload.round_result.round_number));\n        return { ...state,\n                //Set payload data\n                winner: action.payload.winner,\n                start_player: action.payload.start_player,\n                roundResults: newRoundResults,\n                //Reset tie breaker variables\n                tieBreaker: false,\n                tieBreakerDeck: [],\n                tieBreakId : '',\n                tieBreakWinner: null,\n                ties : [],\n                tieStartPlayer: ''\n        };\n      default:\n        return state;\n    }\n  }\n\n  //const [response,setResponse] = useState('');\n  const [state,dispatch] = useReducer(reducer,initialState);\n\n  useEffect( () => {\n    console.log('Using Effect');\n    if (sock) {\n       sock.onopen = function() {\n          console.log(\"Connected\");\n       }\n\n       sock.onclose = (e) =>  {\n          console.log(\"Connection closed (wasClean = \" + e.wasClean + \", code = \" + e.code + \", reason = '\" + e.reason + \"')\");\n          //this = null;\n          console.log(e,sock);\n       }\n\n       sock.onmessage = function(e) {\n          let data = JSON.parse(e.data)\n          //let data = e;\n          console.log(data);\n          switch(data.type) {\n              case 'register':\n                dispatch({type:'register', payload:data.yourid});\n                break;\n              case 'client_list':\n                dispatch({type:'clientList', payload:data.clients});\n                break;\n              case 'set_name':\n                dispatch({type:'setName', payload:data.message});\n                break;\n              case 'room_list':\n                dispatch({type:'roomList', payload:JSON.parse(data.rooms)});\n                break;\n              case 'room_entrance':\n                dispatch({type:'enterRoom', payload:data});\n                break;\n              case 'room_exit':\n                dispatch({type:'exitRoom', payload:data});\n                break;\n              case 'hand':\n                dispatch({type:'hand', payload:data});\n                break;\n              case 'new_round':\n                dispatch({type:'roundResult', payload:data});\n                break;\n              case 'destroy_room':\n                dispatch({type:'destroyRoom', payload:data});\n                break;\n              case 'room_message':\n                dispatch({type:'roomMessage', payload:data});\n                break;\n              case 'in_room_pm':\n                dispatch({type:'roomPm', payload:data});\n                break;\n              case 'trump_selected':\n                dispatch({type:'newTrump', payload:data});\n                break;\n              case 'end_game':\n                dispatch({type:'endGame', payload:data});\n                break;\n              case 'tie_break':\n                dispatch({type:'tieBreak', payload:data});\n                break;\n              case 'end_tie_break':\n                dispatch({type:'endTieBreak', payload:data});\n                break;\n              default:\n                dispatch({type:'setResponse', payload:data.message});\n          }\n       }\n     }\n  }, [] );\n\n\n\n  const sendMessage = async () => {\n    console.log('Message sent');\n    if (sock) {\n       //await sock.send('@:Hello World!');\n       let payload = {\n         type : 'broadcast',\n         message : 'Hello World'\n       }\n       await sock.send(JSON.stringify(payload));\n       console.log(\"Sent \");\n    } else {\n       console.log(\"Not connected.\");\n    }\n  }\n\n  console.log('Something is rotten in the state of react', state);\n\n  return (\n    <div className=\"gameMain\">\n      { state.myName ?\n        <>\n          <p>Welcome {state.myName}</p>\n          {\n            state.inRoom ?\n              <Room userId={state.myId}\n                    name={state.myName}\n                    roomName={state.roomName}\n                    roomMessages={state.roomMessages}\n                    otherMembers={state.otherMembers}\n                    gameInProgress={state.gameInProgress}\n                    hand={state.hand}\n                    startPlayer={state.startPlayer}\n                    trump ={state.trump}\n                    trick={state.trick}\n                    completedTricks={state.completedTricks}\n                    roundNumber={state.roundNumber}\n                    roundResults={state.roundResults}\n                    tieBreaker={state.tieBreaker}\n                    tieBreakerDeck={state.tieBreakerDeck}\n                    tieStartPlayer={state.tieStartPlayer}\n                    tieBreakWinner={state.tieBreakWinner}\n                    tieBreakId={state.tieBreakId}\n                    ties={state.ties}\n                    startRound={state.startRound}\n                    winner={state.winner}\n                    /> :\n              <Rooms userId={state.myId} rooms={state.rooms}/>\n          }\n        </> :\n        <>\n          <p>Welcome</p>\n          <SendName userId={state.myId} />\n        </>\n      }\n\n    </div>\n  )\n}\n\n//REMOVED FOR TIME BEING\n// <button onClick={sendMessage}>Send Message</button>\n// <p>{state.response}</p>\n\nexport default TestConnect;\n","/home/chris/Documents/react/knockoutwhistreact/src/components/SendName.js",[],"/home/chris/Documents/react/knockoutwhistreact/src/components/Rooms.js",[],"/home/chris/Documents/react/knockoutwhistreact/src/components/Room.js",["85","86","87","88"],"import {useState} from 'react';\nimport Hand from './Hand';\nimport Table from './Table';\nimport Tricks from './Tricks';\nimport sock from '../services/socket';\nimport PlayerBox from './PlayerBox';\nimport RoundResults from './RoundResults';\nimport GameOver from './GameOver';\n\n\n\nconst Room = (props) => {\n  console.log('ROOM PROPS',props);\n\n  const [message,setMessage] = useState('');\n  const [pm,setPm] = useState(null);\n\n  const exitRoom = async () => {\n    let payload = {\n      'type' : 'exit_room',\n      'client_id' : props.userId,\n      'name' : props.roomName\n    }\n    await sock.send(JSON.stringify(payload));\n  }\n\n  const startGame = async () => {\n    let payload = {\n      'type' : 'start_game',\n      'name' : props.roomName\n    }\n    await sock.send(JSON.stringify(payload));\n  }\n\n  // const handleEditMessage = async (e) => {\n  //   console.log('text ', e.target.value);\n  //   setMessage(e.target.value);\n  // }\n  //\n  // const sendRoomMessage = async () => {\n  //   let payload = {\n  //     'type' : 'message_room',\n  //     'client_id' : props.userId,\n  //     'name' : props.roomName,\n  //     'message' : message\n  //   }\n  //   await sock.send(JSON.stringify(payload));\n  // }\n  //\n  //\n  // const sendMessage = async (e) => {\n  //   //Check for the '@' symbol with a username\n  //   let sendingPm = message.search(/@([^].)\\w+/i);\n  //   if (sendingPm == 0) {\n  //     console.log('Sending private message')\n  //     //Get the user and check exists\n  //     let person = message.split(':')[0].split('@')[1]\n  //     let personMember = props.otherMembers.filter((m) => (m.name === person));\n  //     if(personMember.length > 0) {\n  //       console.log('Person Exists',personMember);\n  //       let payload = {\n  //         'type' : 'room_pm',\n  //         'client_id' : personMember[0].id,\n  //         'message' : message,\n  //         'sender' : props.name\n  //       }\n  //       console.log('SENDING', payload);\n  //       await sock.send(JSON.stringify(payload));\n  //       //Clear message\n  //       setMessage('');\n  //     } else {\n  //       console.log('Person does not exist');\n  //       sendRoomMessage();\n  //       setMessage('');\n  //     }\n  //   } else {\n  //     console.log('Sending room message');\n  //     sendRoomMessage();\n  //     setMessage('');\n  //   }\n  //\n  //\n  // }\n  //\n  // const pmMember = async (member) => {\n  //   console.log('send a private message',member);\n  //   setMessage(`@${member.name}: `);\n  //   setPm(member);\n  // }\n\n  return (\n    <>\n      <div className=\"gameMain\">\n        { props.otherMembers.length > 0\n          ?\n            <>\n              {\n                !props.gameInProgress\n                ?\n                  <>\n                    <p>You are in {props.roomName}</p>\n                    <PlayerBox\n                      otherMembers={props.otherMembers}\n                      startPlayer={props.startPlayer}\n                    />\n                    <div>\n                      <button id=\"startgame-btn\" onClick={startGame}>Start Game</button>\n                    </div>\n                  </>\n                :\n                  <>\n                    { props.winner && !props.tieBreaker\n                      ?\n                        <>\n                          <GameOver\n                            userId = {props.userId}\n                            winner = {props.winner}\n                          />\n                        </>\n                      :\n                        <>\n                        <div className=\"flex-container\">\n                          <div className=\"statsPanel\">\n                            <PlayerBox\n                              otherMembers={props.otherMembers}\n                              startPlayer={props.startPlayer}\n                            />\n                            <Tricks\n                              userId = {props.userId}\n                              completedTricks={props.completedTricks}\n                              roundNumber={props.roundNumber}\n                            />\n                            <RoundResults\n                              roundResults = {props.roundResults}\n                            />\n                          </div>\n                          <div className=\"playArea\">\n                            <Table\n                              userId={props.userId}\n                              roomId={props.roomName}\n                              trump={props.trump}\n                              trick={props.trick}\n                              tieBreaker={props.tieBreaker}\n                              ties={props.ties}\n                              tieBreakId={props.tieBreakId}\n                              tieBreakerDeck={props.tieBreakerDeck}\n                              tieBreakWinner={props.tieBreakWinner}\n                              tieStartPlayer={props.tieStartPlayer}\n                            />\n                            {\n                              props.userId === props.startPlayer ?\n                              <p id=\"firstgo\">Your turn, pick a card!</p> :\n                              <p></p>\n                            }\n                            {\n                              !props.tieBreaker\n                              ?\n                                <Hand\n                                  hand = {props.hand}\n                                  userId = {props.userId}\n                                  roomId = {props.roomName}\n                                  startRound={props.startRound}\n                                  startPlayer={props.startPlayer}\n                                  trick={props.trick}\n                                />\n                              : null\n                            }\n                          </div>\n                        </div>\n                      </>\n                    }\n                  </>\n              }\n            </>\n          :\n            <>\n              <div>\n                <p>Waiting for others to join</p>\n              </div>\n            </>\n        }\n      </div>\n\n      <div>\n        <button id=\"exit\" onClick={exitRoom}>Exit</button>\n      </div>\n    </>\n  );\n}\n\nexport default Room;\n\n//REMOVE for now\n//<div className=\"editable-div\" contentEditable=\"true\" onChange={handleEditMessage}></div>\n","/home/chris/Documents/react/knockoutwhistreact/src/components/Users.js",[],"/home/chris/Documents/react/knockoutwhistreact/src/services/socket.js",[],"/home/chris/Documents/react/knockoutwhistreact/src/components/Hand.js",["89","90","91"],"/home/chris/Documents/react/knockoutwhistreact/src/services/image-loader.js",["92","93"],"let images = [];\n\nfunction getCard(val) {\n  if(val + 2 < 11) {\n    return (val + 2).toString();\n  } else {\n    switch(val + 2) {\n      case 11:\n        return 'J';\n      case 12:\n        return 'Q';\n      case 13:\n        return 'K';\n      case 14:\n        return 'A';\n    }\n  }\n}\n\n\nfunction getSuit(val) {\n  switch (val) {\n    case 0:\n      return 's';\n    case 1:\n      return 'd';\n    case 2:\n      return 'c';\n    case 3:\n      return 'h';\n  }\n}\n\nfor(let i=0;i<4;i++) {\n  for(let j=0;j<13;j++) {\n    images.push(`../assets/cards/${getSuit(i)}${getCard(j)}.png`);\n  }\n}\n\nconsole.log(JSON.stringify(images));\n\nexport default images;\n","/home/chris/Documents/react/knockoutwhistreact/src/components/CardImage.js",["94","95"],"/home/chris/Documents/react/knockoutwhistreact/src/components/Table.js",["96"],"/home/chris/Documents/react/knockoutwhistreact/src/components/Tricks.js",["97"],"//Shows the winnings\nimport cardBack from \"../assets/cards/playing-card-back.jpg\";\n\n\nconst Tricks = (props) => {\n  console.log(props);\n  return (\n    <div>\n      <p>Round {props.roundNumber}</p>\n      <p>winnings</p>\n      <div className=\"flex-container\">\n        {\n          props.completedTricks.map((trick, i) => (\n              trick.winner.player === props.userId\n              ?\n                <div key={i} className=\"card-back\">\n                  <img className=\"card-back\" src={cardBack}></img>\n                </div>\n              : null\n          ))\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Tricks;\n","/home/chris/Documents/react/knockoutwhistreact/src/components/PlayerBox.js",[],"/home/chris/Documents/react/knockoutwhistreact/src/components/RoundResults.js",[],"/home/chris/Documents/react/knockoutwhistreact/src/components/GameOver.js",[],"/home/chris/Documents/react/knockoutwhistreact/src/services/suithelper.js",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":1,"column":8,"nodeType":"104","messageId":"105","endLine":1,"endColumn":12},{"ruleId":"102","severity":1,"message":"106","line":7,"column":8,"nodeType":"104","messageId":"105","endLine":7,"endColumn":13},{"ruleId":"102","severity":1,"message":"107","line":300,"column":9,"nodeType":"104","messageId":"105","endLine":300,"endColumn":20},{"ruleId":"102","severity":1,"message":"108","line":15,"column":10,"nodeType":"104","messageId":"105","endLine":15,"endColumn":17},{"ruleId":"102","severity":1,"message":"109","line":15,"column":18,"nodeType":"104","messageId":"105","endLine":15,"endColumn":28},{"ruleId":"102","severity":1,"message":"110","line":16,"column":10,"nodeType":"104","messageId":"105","endLine":16,"endColumn":12},{"ruleId":"102","severity":1,"message":"111","line":16,"column":13,"nodeType":"104","messageId":"105","endLine":16,"endColumn":18},{"ruleId":"102","severity":1,"message":"112","line":4,"column":8,"nodeType":"104","messageId":"105","endLine":4,"endColumn":14},{"ruleId":"102","severity":1,"message":"113","line":5,"column":8,"nodeType":"104","messageId":"105","endLine":5,"endColumn":13},{"ruleId":"102","severity":1,"message":"114","line":14,"column":7,"nodeType":"104","messageId":"105","endLine":14,"endColumn":21},{"ruleId":"115","severity":1,"message":"116","line":7,"column":5,"nodeType":"117","messageId":"118","endLine":16,"endColumn":6},{"ruleId":"115","severity":1,"message":"116","line":22,"column":3,"nodeType":"117","messageId":"118","endLine":31,"endColumn":4},{"ruleId":"102","severity":1,"message":"119","line":1,"column":8,"nodeType":"104","messageId":"105","endLine":1,"endColumn":12},{"ruleId":"115","severity":1,"message":"116","line":64,"column":5,"nodeType":"117","messageId":"118","endLine":177,"endColumn":6},{"ruleId":"120","severity":1,"message":"121","line":138,"column":27,"nodeType":"122","endLine":138,"endColumn":119},{"ruleId":"120","severity":1,"message":"121","line":17,"column":19,"nodeType":"122","endLine":17,"endColumn":61},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Users' is defined but never used.","'sendMessage' is assigned a value but never used.","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'pm' is assigned a value but never used.","'setPm' is assigned a value but never used.","'images' is defined but never used.","'image' is defined but never used.","'getCardPicture' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'sock' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]