[{"/home/chris/Documents/react/knockoutwhistreact/src/index.js":"1","/home/chris/Documents/react/knockoutwhistreact/src/App.js":"2","/home/chris/Documents/react/knockoutwhistreact/src/reportWebVitals.js":"3","/home/chris/Documents/react/knockoutwhistreact/src/components/TestConnect.js":"4","/home/chris/Documents/react/knockoutwhistreact/src/components/SendName.js":"5","/home/chris/Documents/react/knockoutwhistreact/src/components/Rooms.js":"6","/home/chris/Documents/react/knockoutwhistreact/src/components/Room.js":"7","/home/chris/Documents/react/knockoutwhistreact/src/components/Users.js":"8","/home/chris/Documents/react/knockoutwhistreact/src/services/socket.js":"9","/home/chris/Documents/react/knockoutwhistreact/src/components/Hand.js":"10","/home/chris/Documents/react/knockoutwhistreact/src/services/image-loader.js":"11","/home/chris/Documents/react/knockoutwhistreact/src/components/CardImage.js":"12","/home/chris/Documents/react/knockoutwhistreact/src/components/Table.js":"13","/home/chris/Documents/react/knockoutwhistreact/src/components/Tricks.js":"14","/home/chris/Documents/react/knockoutwhistreact/src/components/PlayerBox.js":"15","/home/chris/Documents/react/knockoutwhistreact/src/components/RoundResults.js":"16","/home/chris/Documents/react/knockoutwhistreact/src/components/GameOver.js":"17"},{"size":500,"mtime":1611039083000,"results":"18","hashOfConfig":"19"},{"size":338,"mtime":1611292363000,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1611039083000,"results":"21","hashOfConfig":"19"},{"size":10537,"mtime":1612422462129,"results":"22","hashOfConfig":"19"},{"size":856,"mtime":1611641018000,"results":"23","hashOfConfig":"19"},{"size":1419,"mtime":1611640981000,"results":"24","hashOfConfig":"19"},{"size":5303,"mtime":1612502709320,"results":"25","hashOfConfig":"19"},{"size":507,"mtime":1611404422000,"results":"26","hashOfConfig":"19"},{"size":151,"mtime":1611814462683,"results":"27","hashOfConfig":"19"},{"size":1738,"mtime":1612328036881,"results":"28","hashOfConfig":"19"},{"size":635,"mtime":1611989802621,"results":"29","hashOfConfig":"19"},{"size":4940,"mtime":1612329202521,"results":"30","hashOfConfig":"19"},{"size":609,"mtime":1612160838482,"results":"31","hashOfConfig":"19"},{"size":626,"mtime":1612241714774,"results":"32","hashOfConfig":"19"},{"size":280,"mtime":1612159983946,"results":"33","hashOfConfig":"19"},{"size":337,"mtime":1612332509082,"results":"34","hashOfConfig":"19"},{"size":605,"mtime":1612502959713,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"n6cf1y",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/chris/Documents/react/knockoutwhistreact/src/index.js",[],["77","78"],"/home/chris/Documents/react/knockoutwhistreact/src/App.js",["79"],"import logo from './logo.svg';\nimport './App.css';\nimport TestConnect from './components/TestConnect.js';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TestConnect />\n      </header>\n      <main>\n\n      </main>\n      <footer>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","/home/chris/Documents/react/knockoutwhistreact/src/reportWebVitals.js",[],"/home/chris/Documents/react/knockoutwhistreact/src/components/TestConnect.js",["80","81"],"import {useEffect, useReducer} from 'react';\nimport { animateScroll } from \"react-scroll\";\nimport sock from '../services/socket';\nimport SendName from './SendName';\nimport Rooms from './Rooms';\nimport Room from './Room';\nimport Users from './Users';\n\nconst TestConnect = () => {\n  // const wsproto = 'wss';\n  // const wsuri = wsproto + \"://\" + window.location.hostname + \":8080/ws\";\n  // let sock = new WebSocket(wsuri);\n\n  const initialState = {\n                          response:'',\n                          showNameDialog:false,\n                          users: [],\n                          myId:null,\n                          myName:null,\n                          rooms:null,\n                          inRoom: false,\n                          roomName: '',\n                          roomMessages: [],\n                          otherMembers: [],\n                          hand:[],\n                          startPlayer:false,\n                          trump: null,\n                          trick: [],\n                          completedTricks: [],\n                          roundNumber: 0,\n                          gameInProgress: false,\n                          roundResults: [],\n                          tieBreaker: false,\n                          startRound:false,\n                          winner: null\n  };\n\n\n  const scrollDown = () => {\n    console.log('Using room effect');\n    animateScroll.scrollToBottom({\n      containerId: \"messages\"\n    });\n  };\n\n  function reducer(state, action) {\n    let msg;\n    let otherMembers;\n    let inRoom;\n    let roomMessages;\n    let roomName;\n    let tieBreaker;\n\n    switch (action.type) {\n      case 'setResponse':\n        return {...state, response : action.payload};\n      case 'showNameDialog':\n        return {...state, showNameDialog : true};\n      case 'clientList':\n        return {...state, users : action.payload};\n      case 'setName':\n        console.log(action.payload);\n        return {...state, myName : action.payload};\n      case 'register':\n        return {...state, myId : action.payload};\n      case 'roomList':\n        return {...state, rooms : action.payload};\n      case 'enterRoom':\n        console.log('Tying to enter the room', action.payload);\n        if (action.payload.client.name === state.myName) {\n          msg = `Welcome, you have entered ${action.payload.name}.`;\n        } else {\n          msg = `${action.payload.client.name} has entered the room.`;\n        }\n        otherMembers = action.payload.members.filter((item) => (item.id !== state.myId));\n        return {  ...state,\n                  inRoom : true,\n                  roomName: action.payload.name,\n                  roomMessages : [...state.roomMessages,{ class:'entrance', msg }],\n                  otherMembers\n        };\n      case 'exitRoom':\n        msg = `${action.payload.client.name} has left the room.`;\n        //Declare variables for state as dependant on user being leaver\n        roomMessages= [...state.roomMessages,{ class:'entrance', msg }];\n        console.log('I AM LEAVING THE ROOM',action.payload.client.id,state.myId);\n        if(action.payload.client.id === state.myId) {\n          inRoom = false;\n          roomName = '';\n          otherMembers = [];\n          roomMessages = [];\n        } else {\n          inRoom = true;\n          roomName = action.payload.name;\n          otherMembers = action.payload.members.filter((item) => (item.id !== state.myId))\n            .filter((item) => (item.name !== action.payload.client.name));\n          console.log('Other members here', otherMembers);\n        }\n        return {  ...state,\n                  inRoom,\n                  roomName,\n                  roomMessages,\n                  otherMembers\n        };\n      case 'roomMessage':\n        scrollDown();\n        msg = `${action.payload.client.name}: ${action.payload.message} `;\n        return {  ...state,\n                  roomMessages : [...state.roomMessages,{ class:'message', msg }],\n        };\n      case 'roomPm':\n        console.log('Pay me now',action.payload);\n        scrollDown();\n        msg = `${action.payload.sender}: ${action.payload.message} `;\n        return {  ...state,\n                  roomMessages : [...state.roomMessages,{ class:'pm', msg }],\n        };\n      case 'destroyRoom':\n        //Forces an exit of room\n        return {  ...state,\n                  inRoom : false,\n                  roomName :'',\n                  roomMessages:[],\n                  otherMembers:[],\n                  hand:[]\n        };\n      case 'hand':\n        //Set the hand\n        console.log('HAND',action.payload,state.completedTricks);\n        return {  ...state,\n                  hand : action.payload.hand,\n                  startPlayer: action.payload.startplayer,\n                  trump: action.payload.trump,\n                  trick: action.payload.trick,\n                  completedTricks: action.payload.completed_tricks,\n                  roundNumber: action.payload.round_number,\n                  gameInProgress: true,\n                  startRound: false\n        };\n      case 'roundResult':\n        //Set the hand\n        //// TODO: Implement Tie Breaker logic\n        if(action.payload.round_result.ties.length > 1) {\n          tieBreaker = true;\n        } else {\n          tieBreaker = false;\n        }\n        return {  ...state,\n                  hand : action.payload.hand,\n                  startPlayer: action.payload.startplayer,\n                  trump: action.payload.trump,\n                  trick: action.payload.trick,\n                  completedTricks: action.payload.completed_tricks,\n                  roundNumber: action.payload.round_number,\n                  gameInProgress: true,\n                  startRound:true,\n                  roundResults: [...state.roundResults,action.payload.round_result],\n                  tieBreaker: tieBreaker\n        };\n        case 'newTrump':\n          return {  ...state,\n                    trump: action.payload.trump,\n                    startRound: false\n          };\n        case 'endGame':\n          //Set the hand\n          //// TODO: Implement Tie Breaker logic\n          if(action.payload.winner.ties.length > 1) {\n            tieBreaker = true;\n          } else {\n            tieBreaker = false;\n          }\n          return {  ...state,\n                    hand : action.payload.hand,\n                    winner: action.payload.winner,\n                    tieBreaker: tieBreaker\n          };\n      default:\n        return state;\n    }\n  }\n\n  //const [response,setResponse] = useState('');\n  const [state,dispatch] = useReducer(reducer,initialState);\n\n  useEffect( () => {\n    console.log('Using Effect');\n    if (sock) {\n       sock.onopen = function() {\n          console.log(\"Connected\");\n       }\n\n       sock.onclose = (e) =>  {\n          console.log(\"Connection closed (wasClean = \" + e.wasClean + \", code = \" + e.code + \", reason = '\" + e.reason + \"')\");\n          //this = null;\n          console.log(e,sock);\n       }\n\n       sock.onmessage = function(e) {\n          let data = JSON.parse(e.data)\n          //let data = e;\n          console.log(data);\n          switch(data.type) {\n              case 'register':\n                dispatch({type:'register', payload:data.yourid});\n                break;\n              case 'client_list':\n                dispatch({type:'clientList', payload:data.clients});\n                break;\n              case 'set_name':\n                dispatch({type:'setName', payload:data.message});\n                break;\n              case 'room_list':\n                dispatch({type:'roomList', payload:JSON.parse(data.rooms)});\n                break;\n              case 'room_entrance':\n                dispatch({type:'enterRoom', payload:data});\n                break;\n              case 'room_exit':\n                dispatch({type:'exitRoom', payload:data});\n                break;\n              case 'hand':\n                dispatch({type:'hand', payload:data});\n                break;\n              case 'new_round':\n                dispatch({type:'roundResult', payload:data});\n                break;\n              case 'destroy_room':\n                dispatch({type:'destroyRoom', payload:data});\n                break;\n              case 'room_message':\n                dispatch({type:'roomMessage', payload:data});\n                break;\n              case 'in_room_pm':\n                dispatch({type:'roomPm', payload:data});\n                break;\n              case 'trump_selected':\n                dispatch({type:'newTrump', payload:data});\n                break;\n              case 'end_game':\n                dispatch({type:'endGame', payload:data});\n                break;\n              default:\n                dispatch({type:'setResponse', payload:data.message});\n          }\n       }\n     }\n  }, [] );\n\n\n\n  const sendMessage = async () => {\n    console.log('Message sent');\n    if (sock) {\n       //await sock.send('@:Hello World!');\n       let payload = {\n         type : 'broadcast',\n         message : 'Hello World'\n       }\n       await sock.send(JSON.stringify(payload));\n       console.log(\"Sent \");\n    } else {\n       console.log(\"Not connected.\");\n    }\n  }\n\n  console.log('Something is rotten in the state of react', state);\n\n  return (\n    <div>\n      { state.myName ?\n        <>\n          <p>Welcome {state.myName}</p>\n          {\n            state.inRoom ?\n              <Room userId={state.myId}\n                    name={state.myName}\n                    roomName={state.roomName}\n                    roomMessages={state.roomMessages}\n                    otherMembers={state.otherMembers}\n                    gameInProgress={state.gameInProgress}\n                    hand={state.hand}\n                    startPlayer={state.startPlayer}\n                    trump ={state.trump}\n                    trick={state.trick}\n                    completedTricks={state.completedTricks}\n                    roundNumber={state.roundNumber}\n                    roundResults={state.roundResults}\n                    tieBreaker={state.tieBreaker}\n                    startRound={state.startRound}\n                    winner={state.winner}\n                    /> :\n              <Rooms userId={state.myId} rooms={state.rooms}/>\n          }\n        </> :\n        <>\n          <p>Welcome</p>\n          <SendName userId={state.myId} />\n        </>\n      }\n\n    </div>\n  )\n}\n\n//REMOVED FOR TIME BEING\n// <button onClick={sendMessage}>Send Message</button>\n// <p>{state.response}</p>\n\nexport default TestConnect;\n","/home/chris/Documents/react/knockoutwhistreact/src/components/SendName.js",[],"/home/chris/Documents/react/knockoutwhistreact/src/components/Rooms.js",[],"/home/chris/Documents/react/knockoutwhistreact/src/components/Room.js",["82","83","84","85"],"/home/chris/Documents/react/knockoutwhistreact/src/components/Users.js",[],"/home/chris/Documents/react/knockoutwhistreact/src/services/socket.js",[],"/home/chris/Documents/react/knockoutwhistreact/src/components/Hand.js",["86","87","88","89"],"import {useState} from 'react';\n//import { animateScroll } from \"react-scroll\";\nimport sock from '../services/socket';\nimport images from '../services/image-loader';\nimport image from '../assets/cards/s3.png';\nimport CardImage from './CardImage';\n\nrequire('../assets/cards/s2.png');\nconsole.log('here');\n\n\n\nconst getCardPicture = (card) => {\n  console.log(card);\n  let imagePath = `../assets/cards/${card}.png`;\n  return imagePath;\n};\n\nconst Hand = (props) => {\n  let pickTrump;\n\n  if(props.startRound && props.startPlayer === props.userId )\n  {\n    pickTrump = true;\n  } else {\n    pickTrump = false;\n  }\n\n\n  const playCard = async (e) => {\n    console.log('here is the id', e.target.id);\n    let payload = {\n      'type' : 'play_card',\n      'card' : e.target.id,\n      'client_id' : props.userId,\n      'room_id' : props.roomId\n    }\n    await sock.send(JSON.stringify(payload));\n  }\n\n  const handlePickTrump = async (e) => {\n    let payload = {\n      'type' : 'pick_trump',\n      'card' : e.target.id,\n      'client_id' : props.userId,\n      'room_id' : props.roomId\n    }\n    await sock.send(JSON.stringify(payload));\n  }\n\n  return (\n    <>\n      { pickTrump\n        ? <p>Congratulations you won the round! Please pick a trup card.</p>\n        : null\n      }\n      <div className=\"flex-container\">\n        {\n          props.hand.map((card,i) => (\n            <div id={card} key={i} onClick={pickTrump ? handlePickTrump : playCard}>\n              <CardImage\n                id={card}\n                card={card}\n                userId={props.userId}\n                roomId={props.roomId}\n              />\n            </div>\n          ))\n        }\n      </div>\n    </>\n  );\n}\n//src={require(getCardPicture(card))}\nexport default Hand;\n","/home/chris/Documents/react/knockoutwhistreact/src/services/image-loader.js",["90","91"],"let images = [];\n\nfunction getCard(val) {\n  if(val + 2 < 11) {\n    return (val + 2).toString();\n  } else {\n    switch(val + 2) {\n      case 11:\n        return 'J';\n      case 12:\n        return 'Q';\n      case 13:\n        return 'K';\n      case 14:\n        return 'A';\n    }\n  }\n}\n\n\nfunction getSuit(val) {\n  switch (val) {\n    case 0:\n      return 's';\n    case 1:\n      return 'd';\n    case 2:\n      return 'c';\n    case 3:\n      return 'h';\n  }\n}\n\nfor(let i=0;i<4;i++) {\n  for(let j=0;j<13;j++) {\n    images.push(`../assets/cards/${getSuit(i)}${getCard(j)}.png`);\n  }\n}\n\nconsole.log(JSON.stringify(images));\n\nexport default images;\n","/home/chris/Documents/react/knockoutwhistreact/src/components/CardImage.js",["92","93"],"import sock from '../services/socket';\nimport s2 from \"../assets/cards/s2.png\";\nimport s3 from \"../assets/cards/s3.png\";\nimport s4 from \"../assets/cards/s4.png\";\nimport s5 from \"../assets/cards/s5.png\";\nimport s6 from \"../assets/cards/s6.png\";\nimport s7 from \"../assets/cards/s7.png\";\nimport s8 from \"../assets/cards/s8.png\";\nimport s9 from \"../assets/cards/s9.png\";\nimport s10 from \"../assets/cards/s10.png\";\nimport sJ from \"../assets/cards/sJ.png\";\nimport sQ from \"../assets/cards/sQ.png\";\nimport sK from \"../assets/cards/sK.png\";\nimport sA from \"../assets/cards/sA.png\";\nimport d2 from \"../assets/cards/d2.png\";\nimport d3 from \"../assets/cards/d3.png\";\nimport d4 from \"../assets/cards/d4.png\";\nimport d5 from \"../assets/cards/d5.png\";\nimport d6 from \"../assets/cards/d6.png\";\nimport d7 from \"../assets/cards/d7.png\";\nimport d8 from \"../assets/cards/d8.png\";\nimport d9 from \"../assets/cards/d9.png\";\nimport d10 from \"../assets/cards/d10.png\";\nimport dJ from \"../assets/cards/dJ.png\";\nimport dQ from \"../assets/cards/dQ.png\";\nimport dK from \"../assets/cards/dK.png\";\nimport dA from \"../assets/cards/dA.png\";\nimport c2 from \"../assets/cards/c2.png\";\nimport c3 from \"../assets/cards/c3.png\";\nimport c4 from \"../assets/cards/c4.png\";\nimport c5 from \"../assets/cards/c5.png\";\nimport c6 from \"../assets/cards/c6.png\";\nimport c7 from \"../assets/cards/c7.png\";\nimport c8 from \"../assets/cards/c8.png\";\nimport c9 from \"../assets/cards/c9.png\";\nimport c10 from \"../assets/cards/c10.png\";\nimport cJ from \"../assets/cards/cJ.png\";\nimport cQ from \"../assets/cards/cQ.png\";\nimport cK from \"../assets/cards/cK.png\";\nimport cA from \"../assets/cards/cA.png\";\nimport h2 from \"../assets/cards/h2.png\";\nimport h3 from \"../assets/cards/h3.png\";\nimport h4 from \"../assets/cards/h4.png\";\nimport h5 from \"../assets/cards/h5.png\";\nimport h6 from \"../assets/cards/h6.png\";\nimport h7 from \"../assets/cards/h7.png\";\nimport h8 from \"../assets/cards/h8.png\";\nimport h9 from \"../assets/cards/h9.png\";\nimport h10 from \"../assets/cards/h10.png\";\nimport hJ from \"../assets/cards/hJ.png\";\nimport hQ from \"../assets/cards/hQ.png\";\nimport hK from \"../assets/cards/hK.png\";\nimport hA from \"../assets/cards/hA.png\";\nimport hearts from \"../assets/cards/hearts.png\";\nimport diamonds from \"../assets/cards/diamonds.png\";\nimport clubs from \"../assets/cards/clubs.png\";\nimport spades from \"../assets/cards/spades.png\";\n\nconst CardImage = (props) => {\n  const getCard = () => {\n    switch(props.card) {\n      case 's2':\n        return s2;\n      case 's3':\n        return s3;\n      case 's4':\n        return s4;\n      case 's5':\n        return s5;\n      case 's6':\n        return s6;\n      case 's7':\n        return s7;\n      case 's8':\n        return s8;\n      case 's9':\n        return s9;\n      case 's10':\n        return s10;\n      case 'sJ':\n        return sJ;\n      case 'sQ':\n        return sQ;\n      case 'sK':\n        return sK;\n      case 'sA':\n        return sA;\n      case 'd2':\n        return d2;\n      case 'd3':\n        return d3;\n      case 'd4':\n        return d4;\n      case 'd5':\n        return d5;\n      case 'd6':\n        return d6;\n      case 'd7':\n        return d7;\n      case 'd8':\n        return d8;\n      case 'd9':\n        return d9;\n      case 'd10':\n        return d10;\n      case 'dJ':\n        return dJ;\n      case 'dQ':\n        return dQ;\n      case 'dK':\n        return dK;\n      case 'dA':\n        return dA;\n      case 'c2':\n        return c2;\n      case 'c3':\n        return c3;\n      case 'c4':\n        return c4;\n      case 'c5':\n        return c5;\n      case 'c6':\n        return c6;\n      case 'c7':\n        return c7;\n      case 'c8':\n        return c8;\n      case 'c9':\n        return c9;\n      case 'c10':\n        return c10;\n      case 'cJ':\n        return cJ;\n      case 'cQ':\n        return cQ;\n      case 'cK':\n        return cK;\n      case 'cA':\n        return cA;\n      case 'h2':\n        return h2;\n      case 'h3':\n        return h3;\n      case 'h4':\n        return h4;\n      case 'h5':\n        return h5;\n      case 'h6':\n        return h6;\n      case 'h7':\n        return h7;\n      case 'h8':\n        return h8;\n      case 'h9':\n        return h9;\n      case 'h10':\n        return h10;\n      case 'hJ':\n        return hJ;\n      case 'hQ':\n        return hQ;\n      case 'hK':\n        return hK;\n      case 'hA':\n        return hA;\n      case 'h':\n        return hearts;\n      case 'c':\n        return clubs;\n      case 'd':\n        return diamonds;\n      case 's':\n        return spades;\n    }\n  }\n\n  // const playCard = async (e) => {\n  //   let payload = {\n  //     'type' : 'play_card',\n  //     'card' : props.card,\n  //     'client_id' : props.userId,\n  //     'room_id' : props.roomId\n  //   }\n  //   await sock.send(JSON.stringify(payload));\n  // }\n\n  return (\n    <div className=\"cardfront\">\n      <img className=\"cardfront-img\" id={props.id} src={getCard()} alt={props.card}/>\n    </div>\n  );\n}\n\nexport default CardImage;\n","/home/chris/Documents/react/knockoutwhistreact/src/components/Table.js",[],"/home/chris/Documents/react/knockoutwhistreact/src/components/Tricks.js",["94"],"//Shows the winnings\nimport cardBack from \"../assets/cards/playing-card-back.jpg\";\n\n\nconst Tricks = (props) => {\n  console.log(props);\n  return (\n    <div>\n      <p>Round {props.roundNumber}</p>\n      <p>winnings</p>\n      <div className=\"flex-container\">\n        {\n          props.completedTricks.map((trick, i) => (\n              trick.winner.player === props.userId\n              ?\n                <div key={i} className=\"card-back\">\n                  <img className=\"card-back\" src={cardBack}></img>\n                </div>\n              : null\n          ))\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Tricks;\n","/home/chris/Documents/react/knockoutwhistreact/src/components/PlayerBox.js",[],"/home/chris/Documents/react/knockoutwhistreact/src/components/RoundResults.js",[],"/home/chris/Documents/react/knockoutwhistreact/src/components/GameOver.js",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":1,"column":8,"nodeType":"101","messageId":"102","endLine":1,"endColumn":12},{"ruleId":"99","severity":1,"message":"103","line":7,"column":8,"nodeType":"101","messageId":"102","endLine":7,"endColumn":13},{"ruleId":"99","severity":1,"message":"104","line":252,"column":9,"nodeType":"101","messageId":"102","endLine":252,"endColumn":20},{"ruleId":"99","severity":1,"message":"105","line":16,"column":10,"nodeType":"101","messageId":"102","endLine":16,"endColumn":17},{"ruleId":"99","severity":1,"message":"106","line":16,"column":18,"nodeType":"101","messageId":"102","endLine":16,"endColumn":28},{"ruleId":"99","severity":1,"message":"107","line":17,"column":10,"nodeType":"101","messageId":"102","endLine":17,"endColumn":12},{"ruleId":"99","severity":1,"message":"108","line":17,"column":13,"nodeType":"101","messageId":"102","endLine":17,"endColumn":18},{"ruleId":"99","severity":1,"message":"109","line":1,"column":9,"nodeType":"101","messageId":"102","endLine":1,"endColumn":17},{"ruleId":"99","severity":1,"message":"110","line":4,"column":8,"nodeType":"101","messageId":"102","endLine":4,"endColumn":14},{"ruleId":"99","severity":1,"message":"111","line":5,"column":8,"nodeType":"101","messageId":"102","endLine":5,"endColumn":13},{"ruleId":"99","severity":1,"message":"112","line":13,"column":7,"nodeType":"101","messageId":"102","endLine":13,"endColumn":21},{"ruleId":"113","severity":1,"message":"114","line":7,"column":5,"nodeType":"115","messageId":"116","endLine":16,"endColumn":6},{"ruleId":"113","severity":1,"message":"114","line":22,"column":3,"nodeType":"115","messageId":"116","endLine":31,"endColumn":4},{"ruleId":"99","severity":1,"message":"117","line":1,"column":8,"nodeType":"101","messageId":"102","endLine":1,"endColumn":12},{"ruleId":"113","severity":1,"message":"114","line":61,"column":5,"nodeType":"115","messageId":"116","endLine":174,"endColumn":6},{"ruleId":"118","severity":1,"message":"119","line":17,"column":19,"nodeType":"120","endLine":17,"endColumn":61},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Users' is defined but never used.","'sendMessage' is assigned a value but never used.","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'pm' is assigned a value but never used.","'setPm' is assigned a value but never used.","'useState' is defined but never used.","'images' is defined but never used.","'image' is defined but never used.","'getCardPicture' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'sock' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]